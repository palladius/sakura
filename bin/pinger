#!/usr/bin/env ruby

=begin

############################################################
@author:    Riccardo Carlesso
@email:     riccardo.carlesso@gmail.com
@maturity:  development
@language:  Ruby
@synopsis:  pings N hosts che esistono o forse no
@tags:      development, network
@description: See description below (Im super DRY!)
@dependencies: Just type "gem install ric net-ping net-http uri"
############################################################

=end

require 'optparse'     # http://ruby.about.com/od/advancedruby/a/optionparser.htm
require 'ric'          # for the colors
require 'net/ping'     # rescue fatal( "requires: gem install net-ping")
require "net/http"
require "uri"
require "socket"

# Program constants, automagically picked up by RicLib
# More configuration could be written in:
#    $GIC/etc/ricsvn/<FILENAME>.yml
# That would go into the variable '$prog_conf_d'
$myconf = {
  :app_name       => "pinger",
  :description    => "pings many hosts. we start with ICMP, then HTTP ping and ret status, and finally check HTTPS and title",
  :sample_hosts   => "www.google.com www.facebook.com doesnt.exist.com localhost septober.palladius.it"
}

$PROG_VER = '1.0.1'
$DEBUG    = false
$ThreadedArray = [] # will contains responses. PS SEems to be thread-safe! More here: https://www.jstorimer.com/blogs/workingwithcode/8085491-nobody-understands-the-gil

def usage(comment=nil)
  puts $optparse.banner
  puts $optparse.summarize
  pred comment if comment
  #puts "Description: #{ $myconf[:description] }"
  exit 13
end

# include it in main if you want a custome one
def init()    # see lib_autoinit in lib/util.rb
  $opts = {}
  # defaults
  $opts[:color] = true
  $opts[:debug] = false
  
  $optparse = OptionParser.new do |opts|
    opts.banner = "#{$0} v.#{$PROG_VER}\n Usage: #{File.basename $0} [options] host1 host2 host3 ...\n\nExample: pinger --watch #{$myconf[:sample_hosts]}"
    opts.on( '-c', '--color', 'Enables colors (dflt: TRUE)' )   { $opts[:color] = true}
    opts.on( '-d', '--debug', 'enables debug (DFLT=false)' )  {  $opts[:debug] = true ; $DEBUG = true }
    opts.on( '-h', '--help', 'Display this screen' )          {  usage }
  #  opts.on( '-l', '--logfile FILE', 'Write log to FILE' )    {|file| $opts[:logfile] = file }
  #  opts.on( '-v', '--verbose', 'Output more information' )   { $opts[:verbose] = true}
    opts.on( '-w', '--watch', 'Repeats every 2 seconds AWESOME' )   { $opts[:watch] = true}
  end
  $optparse.parse!  
end

# PrettyPrint part

def write_header
  puts "| #{ @columns.map { |_,g| g[:label].ljust(g[:width]) }.join(' | ') } |"
end

def write_divider
  puts "+-#{ @columns.map { |_,g| "-"*g[:width] }.join("-+-") }-+"
end

def write_line(h)
  str = h.keys.map { |k| h[k].ljust(@columns[k][:width]) }.join(" | ")
  puts "| #{str} |"
end

# dremel style :)
def tabular_pretty_print(arr)
  col_labels = { 
    host: "Hostname", 
    ip: "IP Address", 
    response_code: "R80", 
    response_code_443: "443", 
    #response_code_8080: "8080", 
    icmp: white("Ping")
  }
  @columns = col_labels.each_with_object({}) { |(col,label),h|
    h[col] = { label: label,
               width: [arr.map { |g| g[col].size }.max, label.size].max } }

  sorted_arr = arr.sort_by { |el| el[:host] }
  write_divider
  write_header
  write_divider
  sorted_arr.each { |h| write_line(h) }
  write_divider
end


# Network part
def colorize(str)
  #return red("err") if str == :err
  return ("-") if str == :err
  return green("ok") if str == :up
  return red("DOWN") if str == :down
  str.to_s
end


# tells if up or down
def up?(host)
  check = Net::Ping::External.new(host)
  check.ping? 
  #Net::Ping::External.new(host).ping?
end

def get_ip(host)
  begin
    return IPSocket.getaddress(host)
  rescue SocketError
    return :err # :dunno # Can return anything you want here
  end
end

def http_ping(host,port)
  uri = URI.parse("http://#{host}:#{port}/")
  http = Net::HTTP.new(uri.host, uri.port)
  http.read_timeout = 1
  http.open_timeout = 1
  http.use_ssl = true if port == 443
  request = Net::HTTP::Get.new(uri.request_uri)
  response = http.request(request)

  return [ response.code, response["content-type"] ] # response.body ]
end

def threaded_ping_host(host)
  up_response =  up?(host) ? :up : :down
  http_ret = http_ping(host, 80) rescue [:err, $! ]
  http_ret_443 = http_ping(host, 443) rescue [:err, $! ]
  #http_ret_8080 = http_ping(host, 8080) rescue [:err, $! ]
  ip = get_ip(host) rescue :error
  #ret = "[Thread] ICMP:#{ up_response } HTTP:#{http_ret[0]} #{ip}\t #{host}\t# #{http_ret[1].to_s[0..80]}.."
  #$ThreadedArray << ret
  my_hash =  {
    :host => (host), 
    :ip => colorize(ip), 
    :response_code => colorize(http_ret[0]),
    :response_code_443 => colorize(http_ret_443[0]),
    #:response_code_8080 => colorize(http_ret_8080[0]),
    :icmp => colorize(up_response), 
  }
  $ThreadedArray << my_hash
  my_hash # per ora non lo uso ma ansamai.. 
end

def ping_hosts(hosts)
  t_start = Time.now
  threads = [] # strating threads
  deb "#DEB strating threads..."
  hosts.each { |host| 
    threads <<  Thread.new { threaded_ping_host(host)  }
  }
  threads.each(&:join)
  t_end = Time.now # last thread finished
  clear_screen # in teoria adesso dovrebbe avere il join di tutti i thread
  deb "#DEB slowest thread has finished..."
  #sleep 1
  puts "Here's your result hoping it comes from a thead safe array (if something is missing just enable puts):"
  tabular_pretty_print($ThreadedArray)
  puts "It took me #{Integer((t_end-t_start)*1000)}ms - RESTECP!"
end

def clear_screen
  system "clear" # https://stackoverflow.com/questions/12719021/linux-command-reset1-is-slow
  # Alternative: || system "cls" # https://stackoverflow.com/questions/3170553/how-can-i-clear-the-terminal-in-ruby
end
def real_program
  debug_on 'Just created script, presuming u need some debug. TODO REMOVE ME when everything works!' if $DEBUG
    # Maybe you may want to check on ARGV
  unless ARGV.size >= 1
    usage "Give me 1 or more hosts to ping and aruspex!"
    exit 1 
  end
  puts("Ricc, consider --watch to optimize the loading of expensive libraries..")
  puts "I'm Pinging: #{ARGV}"
  
  if $opts[:watch]
    puts "Watch activated. Looping every 3 seconds :)"
    while true 
      ping_hosts(ARGV)
      sleep 3
      $ThreadedArray=[]
      #clear_screen # lo sposto ad appena prima della puts.
      end

  else # normal mode
    ping_hosts(ARGV)
  end

end

def main()
  init        # Enable this to have command line parsing capabilities!
  #lib_autoinit # if u dont like the autoinit, uncomment init :)
  real_program 
end

main() # __FILE__)
