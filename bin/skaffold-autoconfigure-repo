#!/bin/bash

VERSION="1.1"

######################################################
# CHANGELOG
######################################################
# 2022-11-25 v1.1 Fixed in case your config name is not the usual "gke_blah_blah"
# 2022-11-24 v1.0 First implementation.
######################################################
# This script has the intention of highlighting all
# the optential pitfalls/errors of your first skaffold
# usage. Think of it as a "note to self" as a k8s
# beginner.
######################################################

echo "üëã Welcome to $(basename $0) v$VERSION"

function possibly_colored_cat() {
    # if lolcat is present, good! If not, just cat which in a pipe is basically doing nothing :)
    lolcat 2>/dev/null || cat
}
function _yellow() {
    echo -en "\033[1;33m$*\033[0m"
}
# function _infer_kubectl_region_from_config() {
#     # needs YQ :/
#     #CURRENT_CONTEXT="$(kubectl config current-context)"
#     #kubectl config view -o json | jq '.clusters[] | select(.name=="'$CURRENT_CONTEXT'")'
#     #echo @TOD ORIC now you get this public ip and from it gcloud to get the  right cluster
#     # gcloud container clusters list | grep IP from above..
#     #kubectl config view -o json | jq '.contexts[] | select(.name=="non-te-lo-dico")' | jq .context.cluster
#     CURRENT_CONTEXT="$(kubectl config current-context)"
#     kubectl config view -o json | jq '.contexts[] | select(.name=="'$CURRENT_CONTEXT'")' | jq .context.cluster
#     echo TODO
# }

# This gives you sth like: 'gke_cicd-platinum-test031_us-central1_cicd-dev'
# which contains: GKE, ProjectId, Region/Zone, ClusterName :)
# alex taught me this is NOT necessarily the config name, so you need to map the config name
# to cluster name. Also weird tools like `kubectx` might merss up with config name but NOT
# with cluster name. So there you go.
function _infer_kubectl_cluster_from_config() {
    CURRENT_CONTEXT="$(kubectl config current-context)"
    kubectl config view -o json | jq '.contexts[] | select(.name=="'$CURRENT_CONTEXT'")' | jq .context.cluster
}

PROJECT="$(gcloud config get project)"
# I could delve into repo but i dont know what the user is gonna choose if more than one option is given..
# Only works with GKE which is why i force the first egrep, in case someone wants to fix the code with another cloud provider :)
# gke_cicd-platinum-test031_us-central1_cicd-dev
# ==> 'cicd-platinum-test031'
K8S_CLUSTER_INFO="$(_infer_kubectl_cluster_from_config)"
#K8S_PROJECT=$(kubectl config current-context | egrep ^gke_ | cut -d_ -f 2) # OLD
K8S_PROJECT=$(echo "$K8S_CLUSTER_INFO" | cut -d_ -f 2)
# Same as above, I get cluster region for Artifact Repository affinity
# POSSIBLY WRONG K8S_REGION=$(kubectl config current-context | egrep ^gke_ | cut -d_ -f 3)
#K8S_REGION=$(_infer_kubectl_region_from_config)
K8S_REGION=$(echo "$K8S_CLUSTER_INFO" | cut -d_ -f 3)

#skaffold config:
#kube-context: gke_cicd-platinum-test031_us-central1_cicd-dev
#default-repo: us-central1-docker.pkg.dev/cicd-platinum-test031/cicd-plat
# ==> 'cicd-platinum-test031'
AR_PROJECT_FROM_SKAFFOLD_CONFIG=$(skaffold config list | grep default-repo | cut -d/ -f 2)

export DEVCONSOLE_URL="https://console.cloud.google.com/artifacts?project=$PROJECT"

if skaffold config list | grep default-repo ; then
    echo 'üëç Skaffold seems to be already configured. See: `skaffold config list`'
    skaffold config list | possibly_colored_cat
    echo "Fancy re-configuring with this awesome script? Try: $(_yellow skaffold config unset default-repo)"
else

    #######################################
    # skaffold not configured - lets do it!
    #######################################

    echo "ü§î This command will help you set up skaffold repo for your küé±s config: $(_yellow $(kubectl config current-context))"

    if gcloud artifacts repositories list | grep -q DOCKER ; then
        echo 'Try one of these:'
        gcloud artifacts repositories list 2>/dev/null | grep DOCKER | while read AR_NAME dockerblah standard_blah LOCATION blah ; do
            REPONAME="$LOCATION-docker.pkg.dev/$PROJECT/$AR_NAME"
            echo "üåª REPO $(_yellow $AR_NAME) üåç $LOCATION"
            echo "  üåª $(_yellow skaffold config set default-repo $REPONAME)" # sets up Skaffold for the win
            echo "  üåª $(_yellow gcloud auth configure-docker $LOCATION-docker.pkg.dev) # This can help with Auth"
        done
    else
    # TODO check with wc -l :)
        echo 'üò• No flower came out, I presume. It means you need to first create an Artifact repository of type Docker. To create one, try this (I chose the location of your GKE cluster so your code is closer to its deployment üòâ)'
        _yellow "gcloud artifacts repositories create my-skaffold-cornucopia --repository-format DOCKER --location $K8S_REGION"
        echo 'Then try: $(_yellow skaffold build)'
        echo "If you dont like CLI, try to check the AR from the UI: $DEVCONSOLE_URL"
    fi
fi

## TESTS that project ids conform
# TODO add docs to this :)
echo 'NOTE. If these three are NOT the same, this might give you problems. Particularly if 2<>3 you might need to enable proper SvcAccts to access cross-project which doesnt come by default'

echo "1. GCLOUD_PROJECT:      $PROJECT"
echo "2. K8S_PROJECT:         $K8S_PROJECT"
echo "3. AR_PROJECT (if set): $AR_PROJECT_FROM_SKAFFOLD_CONFIG"

