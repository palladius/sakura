#!/usr/bin/env ruby

if RUBY_VERSION.split('.')[0] == 1
  puts "Refusing to launch a script form Ruby 1. Sorry Ric, its 2020 damn it!"
  exit 2020
end

=begin

  ############################################################
  @author:    Riccardo Carlesso
  @email:     riccardo.carlesso@gmail.com
  @maturity:  development
  @language:  Ruby
  @synopsis:  Brief Description here
  @tags:      development, rcarlesso, test
  @description: See description
 ############################################################

=end

$PROG_VER = '0.2'
$DEBUG    = false

require 'optparse'       # http://ruby.about.com/od/advancedruby/a/optionparser.htm


def deb(s);   puts "#DEB #{s}" if $DEBUG; end
# colors 16
def gray(s)    "\033[1;30m#{s}\033[0m" ; end
def green(s)   "\033[1;32m#{s}\033[0m" ; end
def red(s)     "\033[1;31m#{s}\033[0m" ; end
def yellow(s)  "\033[1;33m#{s}\033[0m" ; end
def blue(s)  "\033[1;34m#{s}\033[0m" ; end
def purple(s)  "\033[1;35m#{s}\033[0m" ; end
def azure(s)   "\033[1;36m#{s}\033[0m" ; end
def white(s)   "\033[1;37m#{s}\033[0m" ; end

# colors 64k
def orange(s)   "\033[38;5;208m#{s}\033[0m" ; end

# Program constants, automagically picked up by RicLib
# More configuration could be written in:
#    $GIC/etc/ricsvn/<FILENAME>.yml
# That would go into the variable '$prog_conf_d'
$myconf = {
    :app_name            => "AppName should be sth like #{$0}",
    :description         => "
        Description of program.
        This is a very fine program..
        Tranquillo I'll remove the spaces.
    ".strip.gsub(/^\s+/, "").gsub(/\s+$/, ""),
}
# This template from scripta.rb. from 2.1.0 removed aby ric gem dependency.
# 2022-04-26 2.1.1  Added more colors
# 2022-04-26 2.1.0  Historical momemnt: removed gem 'ric' dependency
$TEMPLATE_VER = '2.1.1'

def usage(comment=nil)
  puts white($optparse.banner)
  puts($optparse.summarize)
  puts("Description: " + gray($myconf[:description]))
  puts red(comment) if comment
  #puts "Description: #{ $myconf[:description] }"
  exit 13
end

# include it in main if you want a custome one
def init()    # see lib_autoinit in lib/util.rb
  $opts = {}
  # setting defaults
  $opts[:verbose] = false
  $opts[:dryrun] = false
  $opts[:debug] = false

  $optparse = OptionParser.new do |opts|
    opts.banner = "#{$0} v.#{$PROG_VER}\n Usage: #{File.basename $0} [options] file1 file2 ..."
    opts.on( '-d', '--debug', 'enables debug (DFLT=false)' )  {  $opts[:debug] = true ; $DEBUG = true }
    opts.on( '-h', '--help', 'Display this screen' )          {  usage }
    #opts.on( '-j', '--jabba', 'Activates my Jabber powerful CLI' ) {  $opts[:jabba] = true  }
    opts.on( '-n', '--dryrun', "Don't really execute code" ) { $opts[:dryrun] = true }
    opts.on( '-l', '--logfile FILE', 'Write log to FILE' )    {|file| $opts[:logfile] = file }
    opts.on( '-v', '--verbose', 'Output more information' )   { $opts[:verbose] = true}
  end
  $optparse.parse!
end

=begin
  https://github.com/pulumi/examples/tree/master/gcp-py-serverless-raw
  =>
  https://github.com/pulumi/examples/ 
  gcp-py-serverless-raw

=end
def split_github_repo_intelligently(github_repo)
  m = github_repo.match /https:\/\/github.com\/(.*)\/(.*)\/tree\/([^\/]+)\/(.*)$/
  raise "Not a github repo" unless m
  #puts m
  #puts m[0] # user
  puts "split_github_repo_intelligently[1] user: '#{ m[1] }'" # user
  puts "split_github_repo_intelligently[2] repo: '#{ m[2] }'" # repo
  puts "split_github_repo_intelligently[3] brnc: '#{ m[3] }'" # branch
  puts "split_github_repo_intelligently[4] dir:  '#{ m[4] }'" # dir
  repo = "https://github.com/#{m[1]}/#{m[2]}/"
  subfolder = m[4]
  [repo, subfolder]
end

def git_clone_repo_by_subdir(repo, subdir)
  puts("TODO: git_clone_repo_by_subdir('#{repo}', '#{subdir}')")
  puts "git clone --depth 1  --filter=blob:none  --no-checkout \
  #{repo}/#{subdir}"
end 

def real_program
  deb 'Just created script, presuming u need some debug. TODO REMOVE ME when everything works!'
  # unless ARGV.size == 2
  #   usage "Give me 2 arguments!"
  # end
  #deb("Hello world from a templated '#{yellow $0 }'")
  deb "+ Options are:  #{gray $opts}"
  deb "+ Depured args: #{azure ARGV}"
  deb "+ Script-specifig super-cool conf: #{green $prog_conf_d}"
  deb "+ Your configuration: #{purple $myconf.inspect}"

  deb "PS Please find me in " + yellow("#{__FILE__}")
  deb "Maybe you forgot to do:
    chmod 755 #{__FILE__}       # make it executable - you never know
    git add   #{__FILE__}       # add to GIT
    guarda    #{__FILE__} &     # edit file
    always -- #{__FILE__} -d   # to see what happens..."
  # Your code goes here...
  if ARGV.size == 2
    git_clone_repo_by_subdir(ARGV[0],ARGV[1])
  end 
  if ARGV.size == 1
    repo, subdir = split_github_repo_intelligently(ARGV[0])
    git_clone_repo_by_subdir(repo, subdir)
  end 
  puts white("Hello world from #{$myconf[:app_name]}!")
  puts "Description: '''#{white $myconf[:description] }'''"
end

def main(filename)
  #deb "I'm called by #{white filename}"
  #deb "To remove this shit, just set $DEBUG=false :)"
  init        # Enable this to have command line parsing capabilities!
  warn "[warn] template v#{$TEMPLATE_VER }: proviamo il warn che magari depreca il DEB"
  real_program
end

main(__FILE__)
