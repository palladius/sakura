#!/usr/bin/env ruby

if RUBY_VERSION.split('.')[0] == 1
  puts "Refusing to launch a script form Ruby 1. Sorry Ric, its 2020 damn it!"
  exit 2020
end

=begin

  ############################################################
  @author:    Riccardo Carlesso
  @email:     riccardo.carlesso@gmail.com
  @maturity:  development
  @language:  Ruby
  @synopsis:  Calculates Battery capacity of Mx Macbooks.
  @tags:      development, macbook, prod
  @description: Algorithm provided in this script:
                https://www.iphonetricks.org/check-battery-health-on-mac-using-terminal/

                Pasting here since Im in an airport

3. do `ioreg -l -w0 | grep Capacity`:
 | | “AppleRawCurrentCapacity” = 6705
| | “AppleRawMaxCapacity” = 6705
| | “MaxCapacity” = 6705
| | “CurrentCapacity” = 6705
| | “LegacyBatteryInfo” = {“Amperage”=0,”Flags”=5,”Capacity”=6705,”Current”=6705,”Voltage”=8517,“Cycle Count”=160}
| | “BatteryData” = {“StateOfCharge”=100,”PMUConfigured”=0,”CellVoltage”=(4261,4256),”AdapterPower”=784,”LifetimeData”={“UpdateTime”=1637173843},”SystemPower”=1321,”Serial”=”-“,”DesignCapacity”=7150,”CycleCount”=160,”Voltage”=8518,”Qmax”=(7213,7160)}
| | “DesignCapacity” = 7150

4. Calculate Battery Health using simple maths:

“Design Capacity” represents 100%
“Max Capacity” is x (Battery Health).
The result is x = (“Max Capacity” x 100) / Design Capacity = (6705 x 100) / 7150 = 93.77%

 ############################################################


CHANGELOG
  2022-11-10 v0.3 Tried on Linux and trying to fail cleanly.
  2022-11-10 v0.2 Re-implemented for M1. Luckily all things made sense, just the string splitting didnt.
  2022-11-10 v0.1 First inmplementation on my MacBook Air at the airport.
=end
$PROG_VER = '0.3'

$DEBUG    = false

require 'optparse'       # http://ruby.about.com/od/advancedruby/a/optionparser.htm


def deb(s);   puts "#DEB #{s}" if $DEBUG; end
# # colors 16
def gray(s)    "\033[1;30m#{s}\033[0m" ; end
def green(s)   "\033[1;32m#{s}\033[0m" ; end
def red(s)     "\033[1;31m#{s}\033[0m" ; end
def yellow(s)  "\033[1;33m#{s}\033[0m" ; end
def blue(s)  "\033[1;34m#{s}\033[0m" ; end
def purple(s)  "\033[1;35m#{s}\033[0m" ; end
def azure(s)   "\033[1;36m#{s}\033[0m" ; end
def white(s)   "\033[1;37m#{s}\033[0m" ; end

# # colors 64k
# def orange(s)   "\033[38;5;208m#{s}\033[0m" ; end

# Program constants, automagically picked up by RicLib
# More configuration could be written in:
#    $GIC/etc/ricsvn/<FILENAME>.yml
# That would go into the variable '$prog_conf_d'
$myconf = {
    :app_name            => "MacbookBattery stripper",
    :description         => "
        This amazing program was written in 10min in an airport on a Mac
        without battery. So please appreciate the circularity and humour of this.
        It only works on a Mac and relies on `ioreg` parsable output: 🤢

        This script was scripted with my meta-scripter `scripta.rb`, of course.
    ".strip.gsub(/^\s+/, "").gsub(/\s+$/, ""),
}


def usage(comment=nil)
  puts white($optparse.banner)
  puts($optparse.summarize)
  puts("Description: " + gray($myconf[:description]))
  puts red(comment) if comment
  exit 13
end

# include it in main if you want a custome one
def init()    # see lib_autoinit in lib/util.rb
  $opts = {}
  # setting defaults
  $opts[:verbose] = false
  $opts[:dryrun] = false
  $opts[:debug] = false

  $optparse = OptionParser.new do |opts|
    opts.banner = "#{$0} v#{$PROG_VER}\n Usage: #{File.basename $0} [--debug]"
    opts.on( '-d', '--debug', 'enables debug (DFLT=false)' )  {  $opts[:debug] = true ; $DEBUG = true }
    opts.on( '-h', '--help', 'Display this screen' )          {  usage }
    #opts.on( '-j', '--jabba', 'Activates my Jabber powerful CLI' ) {  $opts[:jabba] = true  }
    #opts.on( '-n', '--dryrun', "Don't really execute code" ) { $opts[:dryrun] = true }
    #opts.on( '-l', '--logfile FILE', 'Write log to FILE' )    {|file| $opts[:logfile] = file }
    opts.on( '-v', '--verbose', 'Output more information' )   { $opts[:verbose] = true}
  end
  $optparse.parse!
end

def mac_model()
  `sysctl -n machdep.cpu.brand_string`
end

def is_mac?()
  `uname`.chomp == 'Darwin'
end


# latest chipset
def is_m1?()
  mac_model().match /Apple M1/
end
=begin
  Note on my Mac M1 this doesnt work :/
  and I cant test it on both macs at the same time as they're remote.
  So I'm now trying M1 metrics. If they work i'm gonna remove the other ones.
=end
def processMacCapacity(buridone)
  ret = {}
  ret[:debug] = 'Will fill numerator and denominator until I nail it.'
  ret[:capacity_pct] = 142 # clearlly wrong
  # `ioreg -l -w0 | grep AppleRawMaxCapacity`.split
  # => ["|", "|", "\"AppleRawMaxCapacity\"", "=", "4320"]
  ret[:AppleRawMaxCapacity] = `ioreg -l -w0 | grep AppleRawMaxCapacity`.split[4].to_i # Works on my small Mac but not on the M1
  ret[:AppleRawCurrentCapacity] = `ioreg -l -w0 | grep AppleRawCurrentCapacity`.split[4].to_i
  if is_m1?
    ret[:AppleRawMaxCapacityM1] = `ioreg -l -w0 | grep AppleRawMaxCapacity`.split("=")[1].strip.to_i
    ret[:AppleRawCurrentCapacityM1] = `ioreg -l -w0 | grep AppleRawCurrentCapacity`.split("=")[1].strip.to_i
  end
  #  => ["\"StateOfCharge\"=41"]
  ret[:StateOfCharge] = `ioreg -l -w0 | grep BatteryData`.split(',').select{|e| e.match /StateOfCharge/ }[0].split('=')[1].to_i
  ret[:AppleDesignCapacity] = `ioreg -l -w0 | grep BatteryData`.split(',').select{|e| e.match /DesignCapacity/ }[0].split('=')[1].to_i

  # derived values..
  # this should be your battery life i guess?x
  ret[:BatteryCapacityPercent] = ret[:AppleRawCurrentCapacity]*100.0 / ret[:AppleRawMaxCapacity]
  ret[:battery_health] =  ret[:AppleRawMaxCapacity]*100.0/ret[:AppleDesignCapacity]
  if is_m1?
    ret[:BatteryCapacityPercentM1] = ret[:AppleRawCurrentCapacityM1]*100.0 / ret[:AppleRawMaxCapacityM1]
    ret[:battery_healthM1] =  ret[:AppleRawMaxCapacityM1]*100.0/ret[:AppleDesignCapacity]
  end
  return ret
end

def real_program
  # unless ARGV.size == 2
  #   usage "Give me 2 arguments!"
  # end
#  deb "+ Options are:  #{gray $opts}"
#  deb "+ Depured args: #{azure ARGV}"

  usage("This only works on a Mac, sorry.") unless is_mac?

  capacity_hash = processMacCapacity(`ioreg -l -w0 | grep Capacity`)
  deb "capacity_hash: '''#{white capacity_hash}'''"
  if $DEBUG
    capacity_hash.each{|k,v|
      puts "[DEB] #{k}:\t#{v}"
  }
  end

  if is_m1?
    # removing icons as they dont play well with AWK: 🔌🪫🛟
    puts "1M. 🔋 BatteryLife %: #{capacity_hash[:BatteryCapacityPercentM1].round(2)}" if is_m1? # capacity_hash[:BatteryCapacityPercentM1].nan?
    puts "2M. 🔋 BatteryHealth %: #{capacity_hash[:battery_healthM1].round(2)}"
  else
    # My MacBook air
    puts "1A. 🔋 BatteryLife %: #{capacity_hash[:BatteryCapacityPercent].round(2)}" # unless capacity_hash[:BatteryCapacityPercent].nan? # == NaN
    puts "2A. 🔋 BatteryHealth %: #{capacity_hash[:battery_health].round(2)}"
  end
end 

def main(filename)
  deb "I'm main(), called by #{white filename}"
  init        # Enable this to have command line parsing capabilities!
  real_program
end

main(__FILE__)
